#!/bin/bash
#
# wrapper for git, with reasonable defaults, and consistent remote/branch use.
#

# return true if the parameter represents a remote branch, and set vars
# $remote_site, $remote_branch
function check_remote_branch {
  remote_branch=$(echo "$1" | awk -F/ '{ print $2 }')
  if [ "x$remote_branch" = "x" ]; then
    return 1
  fi
  remote_site=$(echo "$1" | awk -F/ '{ print $1 }')
  return 0
}

function get_current_branch {
  current_branch=$(git name-rev --name-only head 2>/dev/null)
}


case "$1" in
  co)
    shift
    git checkout "$@"
    ;;

  fork)
    # git fork <branch> [<original-branch>]
    shift
    
    # "git fork origin/somebranch" -> make local "somebranch"
    new_branch="$1"
    if [ $# -eq 1 ] && check_remote_branch "$1"; then
      new_branch="$remote_branch"
      all_args="$remote_branch $1"
    else
      all_args="$@"
    fi

    git checkout -b "$all_args"
    
    # If the branch already exists, just switch to it.
    if [ $? -eq 128 ]; then
      git checkout $new_branch
    fi
    ;;
    
  log)
    shift
    declare -a args
    i=0
    while [ "x$1" != "x" ]; do
      case "$1" in
        --linear)
          args[$i]="--first-parent"
          ;;
        *)
          args[$i]="$1"
          ;;
      esac
      shift
      i=$((i+1))
    done
    git log --topo-order --graph --decorate "${args[@]}"
    ;;
    
  merge)
    shift
    git merge --no-ff "$@"
    ;;

  pull)
    shift
    if [ $# -eq 1 ]; then
      # git pull <branch>
      if check_remote_branch "$1"; then
        git pull "$remote_site" "$remote_branch"
      else
        git pull "$1"
      fi
    else
      git pull "$@"
    fi
    ;;

  push)
    shift
    case "$#" in
      0)
        get_current_branch
        git push origin $current_branch
        ;;
      1)
        # git push <branch>
        if check_remote_branch "$1"; then
          git push "$remote_site" "$remote_branch"
        else
          git push "$1"
        fi
        ;;
      *)
        git push "$@"
        ;;
    esac
    ;;
    
  rebase)
    shift
    if [ $# -eq 1 ]; then
      # git rebase <branch>
      if check_remote_branch "$1"; then
        git rebase "$remote_site" "$remote_branch"
      else
        git rebase "$1"
      fi
    else
      git rebase "$@"
    fi
    ;;

  track)
    # git track [remote] -- set the auto-target of push/pull for this branch.
    shift
    get_current_branch
    if [ $# -eq 1 ]; then
      remote="$1"
    else
      remote="origin"
    fi
    git config "branch.$current_branch.remote" "$remote"
    git config "branch.$current_branch.merge" "$current_branch"
    ;;

  shelve)
    git stash
    ;;
    
  unshelve)
    git stash pop
    ;;

  *)
    git "$@"
    ;;
esac
